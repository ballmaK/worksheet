events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # 基本设置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    server {
        # 动态端口配置
        listen $PORT;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # 安全头
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # 静态资源缓存
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            try_files $uri =404;
        }

        # API代理到后端服务
        location /api/ {
            proxy_pass $BACKEND_URL/api/;
            proxy_set_header Host $BACKEND_HOST;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            
            # 增加缓冲区大小以处理大响应头
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
            proxy_temp_file_write_size 256k;
            
            # 增加超时时间
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # 连接重置处理
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
            
            # 保持连接
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
        
        # WebSocket代理到后端服务
        location /api/v1/ws/ {
            proxy_pass $BACKEND_URL/api/v1/ws/;
            proxy_set_header Host $BACKEND_HOST;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            
            # WebSocket特定配置
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
            proxy_set_header Sec-WebSocket-Version $http_sec_websocket_version;
            proxy_set_header Sec-WebSocket-Protocol $http_sec_websocket_protocol;
            
            # WebSocket超时设置
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # SPA路由支持 - 所有路由都返回index.html
        location / {
            try_files $uri $uri/ /index.html;
        }

        # 健康检查端点
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # 前端状态检查端点
        location /status {
            access_log off;
            return 200 '{"status": "frontend_healthy", "backend_url": "$BACKEND_URL", "timestamp": "$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # 后端连接测试端点
        location /api-test {
            access_log /var/log/nginx/api-test.log;
            error_log /var/log/nginx/api-test-error.log debug;
            
            # 尝试连接到后端根路径
            proxy_pass $BACKEND_URL/;
            proxy_set_header Host $BACKEND_HOST;
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # 如果后端不可用，返回错误信息
            proxy_intercept_errors on;
            error_page 502 503 504 = @backend_error;
        }
        
        # 后端错误处理
        location @backend_error {
            return 502 '{"error": "Backend service unavailable", "backend_url": "$BACKEND_URL", "timestamp": "$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # 错误页面
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
